//
//  CachedRepositoryListModuleInteractor.swift
//  GitBrowser
//
//  Created Станислав Калиберов on 05.12.2017.
//  Copyright © 2017 Станислав Калиберов. All rights reserved.
//
//  Template generated by Stanislav Kaliberov
//

import UIKit

private let kBadUrlErrorMessage = "Bad url"
private let kMaxTextLength = 30

class CachedRepositoryListModuleInteractor {

    //MARK: - Properties
    weak var output: CachedRepositoryListModuleInteractorOutput?
    var repositoriesService: RepositoriesCachedService
    
    var repositories: [RepositoryObject] = []
    
    
    init(repositoriesService: RepositoriesCachedService) {
        self.repositoriesService = repositoriesService
    }
}

extension CachedRepositoryListModuleInteractor: CachedRepositoryListModuleInteractorInput {
    
    func reloadRepsitoryBy(id: Int32?) {
        if let _id = id, let newRepo = repositoriesService.fetchBy(ids: [_id]).first, let oldRepo = repositories.filter({$0.uid == newRepo.uid}).first, let index = repositories.index(of: oldRepo) {
            repositories[index] = newRepo
            output?.updateDataSource(repositories: repositories.map{ Repository(repositoryObject: $0, withTruncate: kMaxTextLength) })
        }
    }
    
    func getRepositories() {
        repositoriesService.fetchAll() { [weak self] (newRepositories, error) in
            guard let wSelf = self else { return }
            
            guard let _newRepositories = newRepositories else {
                wSelf.output?.showError(text: error?.localizedDescription ?? "Error")
                return
            }
            
            wSelf.repositories.append(contentsOf: _newRepositories)
            let repositoriesViewModel = wSelf.repositories.map{ Repository(repositoryObject: $0, withTruncate: kMaxTextLength) }
            wSelf.output?.updateDataSource(repositories: repositoriesViewModel)
        }
    }
    
    func didSelectItem(index: Int) {
        let selectedRepository = repositories[index]
        if let urlStr = selectedRepository.url, let url = URL(string: urlStr) {
            let repositoryId = selectedRepository.isViewed ? nil : selectedRepository.uid
            output?.openRepositoryDetail(url: url, repositoryId: repositoryId)
            
        } else {
            output?.showError(text: kBadUrlErrorMessage)
        }
    }
}
