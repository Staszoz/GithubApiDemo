//
//  CachedRepositoryListModulePresenter.swift
//  GitBrowser
//
//  Created Станислав Калиберов on 05.12.2017.
//  Copyright © 2017 Станислав Калиберов. All rights reserved.
//
//  Template generated by 
//

import UIKit

private let kNavigationTitle = "History"

class CachedRepositoryListModulePresenter: CachedRepositoryListModuleInput {

    //MARK: - Properties
    weak private var view: CachedRepositoryListModuleViewInput?
    var interactor: CachedRepositoryListModuleInteractorInput?
    private let router: CachedRepositoryListModuleRouterInput
    
    
    init(interface: CachedRepositoryListModuleViewInput, interactor: CachedRepositoryListModuleInteractorInput?, router: CachedRepositoryListModuleRouterInput) {
        self.view = interface
        self.interactor = interactor
        self.router = router
    }
}

extension CachedRepositoryListModulePresenter: CachedRepositoryListModuleViewOutput {
    
    func didLoadView() {
        interactor?.getRepositories()
        view?.configureNavigationTitle(text: kNavigationTitle)
    }
    
    func didSelectRowAt(index: IndexPath) {
        interactor?.didSelectItem(index: index.row)
    }
}

extension CachedRepositoryListModulePresenter: CachedRepositoryListModuleInteractorOutput {
    
    func showError(text: String) {
        DispatchQueue.main.async {
            self.view?.showOkAlert(title: "Error", text: text)
        }
    }
    
    func updateDataSource(repositories: [Repository]) {
        DispatchQueue.main.async {
            self.view?.updateDataSource(repositories: repositories)
        }
    }
    
    func openRepositoryDetail(url: URL, repositoryId: Int32?) {
        router.openRepositoryDetail(url: url, repositoryId: repositoryId, presenter: self)
    }
}

extension CachedRepositoryListModulePresenter: RepositoryDetailModuleOutput {
    
    func didChangeRepository(id: Int32?) {
        interactor?.reloadRepsitoryBy(id: id)
    }
}
