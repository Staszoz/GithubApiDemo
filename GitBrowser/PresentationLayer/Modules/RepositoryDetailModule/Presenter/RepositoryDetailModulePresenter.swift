//
//  RepositoryDetailModulePresenter.swift
//  GitBrowser
//
//  Created Станислав Калиберов on 05.12.2017.
//  Copyright © 2017 Станислав Калиберов. All rights reserved.
//
//  Template generated by 
//

import UIKit

class RepositoryDetailModulePresenter: RepositoryDetailModuleInput {

    //MARK: - Properties
    weak private var view: RepositoryDetailModuleViewInput?
    var interactor: RepositoryDetailModuleInteractorInput?
    private let router: RepositoryDetailModuleRouterInput
    weak var outputHandler: RepositoryDetailModuleOutput?
    
    var presenterStateStorage: RepositoryDetailModulePresenterStateStorage

    
    init(interface: RepositoryDetailModuleViewInput, interactor: RepositoryDetailModuleInteractorInput?, router: RepositoryDetailModuleRouterInput, presenterStateStorage: RepositoryDetailModulePresenterStateStorage) {
        self.view = interface
        self.interactor = interactor
        self.router = router
        self.presenterStateStorage = presenterStateStorage
    }
}

extension RepositoryDetailModulePresenter: RepositoryDetailModuleViewOutput {
    
    func didLoadView() {
        view?.openPage(with: presenterStateStorage.url)
        interactor?.markAsViewed(repositoryId: presenterStateStorage.repositoryId)
        outputHandler?.didChangeRepository(id: presenterStateStorage.repositoryId)
    }
    
    func didTapCloseButton() {
        router.dissmis(with: true)
    }
    
    func didGesturePerform(sender: UITapGestureRecognizer) {
        router.dissmis(with: true)
    }
}

extension RepositoryDetailModulePresenter: RepositoryDetailModuleInteractorOutput {}
